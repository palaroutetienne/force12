"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.expressCspHeader = expressCspHeader;
const crypto_1 = require("crypto");
const csp_header_1 = require("csp-header");
const psl = require("psl");
const constants_1 = require("./constants");
__exportStar(require("./constants"), exports);
function expressCspHeader(params) {
    return function (req, res, next) {
        if (!params) {
            next();
            return;
        }
        const { domainOptions } = params;
        let cspString = getCspString(req, res, params);
        cspString = applyNonce(req, cspString);
        cspString = applyAutoTld(req, cspString, domainOptions);
        res.set(params.reportOnly ? CSP_REPORT_ONLY_HEADER : CSP_HEADER, cspString);
        const reportTo = typeof params.reportTo === 'function' ?
            params.reportTo(req, res) :
            params.reportTo;
        if (reportTo) {
            res.set(REPORT_TO_HEADER, reportTo.map(group => JSON.stringify(group)).join(','));
        }
        next();
    };
}
function getCspString(req, res, params) {
    const { directives, presets, reportUri } = params;
    const cspHeaderParams = {
        directives,
        presets,
        reportUri: typeof reportUri === 'function' ? reportUri(req, res) : reportUri
    };
    return (0, csp_header_1.getCSP)(cspHeaderParams);
}
function applyNonce(req, cspString) {
    if (cspString.includes(constants_1.NONCE)) {
        req.nonce = (0, crypto_1.randomBytes)(16).toString('base64');
        return cspString.replace(new RegExp(constants_1.NONCE, 'g'), (0, csp_header_1.nonce)(req.nonce));
    }
    return cspString;
}
function applyAutoTld(req, cspString, domainOptions) {
    if (cspString.includes(constants_1.TLD)) {
        const tld = parseDomain(req.hostname, domainOptions);
        if (!tld) {
            return cspString;
        }
        return cspString.replace(new RegExp(constants_1.TLD, 'g'), tld);
    }
    return cspString;
}
function parseDomain(hostname, domainOptions) {
    const customTlds = domainOptions?.customTlds;
    if (customTlds instanceof RegExp) {
        const tld = hostname.match(customTlds);
        if (tld !== null) {
            return tld[0].replace(/^\.+/, '');
        }
    }
    if (Array.isArray(customTlds)) {
        for (const tld of customTlds) {
            if (hostname.endsWith(`.${tld}`)) {
                return tld;
            }
        }
    }
    const domain = psl.parse(hostname);
    if (domain.error) {
        return null;
    }
    return domain.tld;
}
const CSP_HEADER = 'Content-Security-Policy';
const CSP_REPORT_ONLY_HEADER = 'Content-Security-Policy-Report-Only';
const REPORT_TO_HEADER = 'Report-To';
//# sourceMappingURL=index.js.map